#
#  Copyright (c) 2023 SAP SE
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0
#
#  SPDX-License-Identifier: Apache-2.0
#
#  Contributors:
#       SAP SE - initial implementation
#

---
# Default values for this helm chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Namespace (i.e., spaicerns1) must be maintained in multiple parameters within this file

#########################################################################################################
tags:  # see ./Chart.yaml @url: https://helm.sh/docs/topics/charts/#tags-and-condition-fields-in-dependencies
  nginx: true
#  dsc: true
  emqx: true
  nodered: true
  airflow: true
  prototype-uc1-narrative1-digital-coil: true
  digital-coil-ui: true
  annotator-module: true
  oauth2-proxy: true
  kong: true

global:
  domain: ""
  # Subdomain of oauth2-proxy referenced by external oauth2 provider
  authDomain: "auth"
  # Name of the oauth2-proxy service referenced by all ingress definitions
  oauth2_proxy_name: "oauth2-proxy"
  # Port of the oauth2-proxy service referenced by all ingress definitions
  oauth2_proxy_port: 4180
  # Secrets used by oauth2-proxy to connect to the external oauth2 provider
  oauth_client_id: ""
  oauth_client_secret: ""

postgres:
  enabled: true
  fullnameOverride: &postgresHost "spaicerns1-helm-postgresql"
  auth:
    password: &psqlPassword "psql_password"
    username: &psqlUsername "postgresql_sandbox_user"
    database: &psqlDatabase "edc"
  persistence:
    enabled: true

# EDC Connector Vault
vault:
  enabled: true
  fullnameOverride: "spaicerns1-helm-vault"
  injector:
    enabled: false
  server:
    dev:
      enabled: true
      devRootToken: &vaultToken "root"
    postStart:
      - "sh"
      - "-c"
      - |
        { 
        
        sleep 5
        /bin/vault kv put secret/data-encryption-aes-keys content=OcvxzWCK8ETSjt1jmZw3RA==
        cat << EOF | /bin/vault kv put secret/my-edc-daps-key content=-
        -----BEGIN PRIVATE KEY-----
        MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQCv+NUvK7ppJPiM
        wZPaQQxE745T5pV38O/Mkay5m82nnd5BoMoCdhhRTy3Efy79FhvBfGruFBLLGzsQ
        FOEUY53Albeumo2gmpZSKjJR/M2ifK4MTaRniVOWL5mEcZSKPhsItKpxdLaiYfB6
        8uzqkqNICtmAQRSclYKzLBM9xHLEtxDWCbnzYFCHoOELGi+PTNIFsUnsT3QuKaJ/
        ejb47vdA/EZbwCQdtTyJ6i54jGhZUp0WMwq1Go2uhzJsygPmT2da/ZZZc7BNNEQE
        sUSMZSpMH807TG/TunstotrzO4ShhpV4zbJ2FV/VlxH7yuCawmnR84F/KnXs9fUc
        RSrQfuYBAgMBAAECggEAO+KjsjTgcG3bhBNQnMLsSP15Y0Yicbn18ZlVvaivGS7Z
        d14fwSytY+ZdPfTGaey/L16HCVSdfK9cr0Fbw9OO2P5ajzobnp9dLsMbctlkpbpm
        hNtbarzKTF8QkIkSsuUl0BWjt46vpJ1N+Jl5VO7oUFkY4dPEDvG2lAEY3zlekWDm
        cQeOC/YgpoW4xfRwPPS6QE0w3Q+H5NfNjfz+mSHeItTlVfTKDRliWQLPWeRZFuXh
        FlRFUQnTmEE/9wpIe3Hn7WXJ3fQqcYDzxU7/zwwY9I7bB15SgVHlR0ENDPAD5X8F
        MVZ3EcLlqGBy+WvTWALp6pc8YfhW3fiTWyuamXtNrQKBgQDonsIzBKEOOKdKGW0e
        uyw79ErmnmzkY5nuMrMxrmTA4WKCfJ/YRRA+4sxiltWsIJ3UkHe3OBCSSCdj79hb
        ugb/+UzE70hOdgrct2NUQqbrj3gvsVvU8ZRQgTRMqKpmC0zY7KOMx6NU85z3IvS1
        z5fjszcUv4kLQlldYGSAuqPy+wKBgQDBqIkc8p/wcw7ygo1q/GerNeszfoxiIFp8
        h4RWLVhkwrcXFz30wBlUWuv5/kxU8tmJcmXxe72EmUstd6wvNOAnYwCiile6zQiJ
        vsr1axavZnGOtNGUp6DUAsd2iviBl7IZ7kAcqCrQo4ivGhfHmahH3hmg8wuAMjYB
        8f+FSPgaMwKBgQC7W4tMrjDOFIFhJEOIWfcRvvxI7VcFSNelS76aiDzsQVwnfxr7
        hPzFucQmsBgfUBHvMADMWGK4f1cCnh5kGtwidXgIsjVJxLeQ+EAPkLOCzQZfW3l8
        dKshgD9QcxTzpaxal5ZPAEikVqaZQtVYToCmzCTUGETYBbOWitnH+Qut2wKBgQC6
        Y6DcSLUhc0xOotLDxv1sbu/aVxF8nFEbDD+Vxf0Otc4MnmUWPRHj+8KlkVkcZcR0
        IrP1kThd+EDAGS+TG9wmbIY+6tH3S8HM+eJUBWcHGJ1xUZ1p61DC3Y3nDWiTKlLT
        3Fi+fCkBOHSku4Npq/2odh7Kp0JJd4o9oxJg0VNhuwKBgQDSFn7dqFE0Xmwc40Vr
        0wJH8cPWXKGt7KJENpj894buk2DniLD4w2x874dzTjrOFi6fKxEzbBNA9Rq9UPo8
        u9gKvl/IyWmV0c4zFCNMjRwVdnkMEte/lXcJZ67T4FXZByqAZlhrr/v0FD442Z9B
        AjWFbUiBCFOo+gpAFcQGrkOQHA==
        -----END PRIVATE KEY-----
        EOF
        
        cat << EOF | /bin/vault kv put secret/my-edc-daps-crt content=-
        -----BEGIN CERTIFICATE-----
        MIIEAzCCAuugAwIBAgIUXFgjbN7jxGRUDkoUvEwcN3zcew8wDQYJKoZIhvcNAQEL
        BQAwgZAxCzAJBgNVBAYTAkRFMQ8wDQYDVQQIDAZCZXJsaW4xDzANBgNVBAcMBkJl
        cmxpbjEMMAoGA1UECgwDQk1XMSAwHgYDVQQLDBdlZGMtcGxheWdyb3VuZC1wYXJ0
        bmVyMTEvMC0GA1UEAwwmc29rcmF0ZXMtZWRjLmRlbW8uY2F0ZW5hLXgubmV0L0JQ
        TjEyMzQwHhcNMjIwNTEwMDc1NzMzWhcNMjMwNTEwMDc1NzMzWjCBkDELMAkGA1UE
        BhMCREUxDzANBgNVBAgMBkJlcmxpbjEPMA0GA1UEBwwGQmVybGluMQwwCgYDVQQK
        DANCTVcxIDAeBgNVBAsMF2VkYy1wbGF5Z3JvdW5kLXBhcnRuZXIxMS8wLQYDVQQD
        DCZzb2tyYXRlcy1lZGMuZGVtby5jYXRlbmEteC5uZXQvQlBOMTIzNDCCASIwDQYJ
        KoZIhvcNAQEBBQADggEPADCCAQoCggEBAK/41S8rumkk+IzBk9pBDETvjlPmlXfw
        78yRrLmbzaed3kGgygJ2GFFPLcR/Lv0WG8F8au4UEssbOxAU4RRjncCVt66ajaCa
        llIqMlH8zaJ8rgxNpGeJU5YvmYRxlIo+Gwi0qnF0tqJh8Hry7OqSo0gK2YBBFJyV
        grMsEz3EcsS3ENYJufNgUIeg4QsaL49M0gWxSexPdC4pon96Nvju90D8RlvAJB21
        PInqLniMaFlSnRYzCrUaja6HMmzKA+ZPZ1r9lllzsE00RASxRIxlKkwfzTtMb9O6
        ey2i2vM7hKGGlXjNsnYVX9WXEfvK4JrCadHzgX8qdez19RxFKtB+5gECAwEAAaNT
        MFEwHQYDVR0OBBYEFOcHLXRWZjHwexDqtgMGTCN/7aZlMB8GA1UdIwQYMBaAFOcH
        LXRWZjHwexDqtgMGTCN/7aZlMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
        BQADggEBAD2a5kuIdICNXfYLpSe7AIONwZVucaArYtpXBxHEy5lMJsTEJgjZzypd
        iIMU7onEQGVbii6yVNpWfIpJYM4e8ytVdJuk5evclVKZs/lZ2IshLyWFVj+ITh2E
        28X4C/Hnmt4MPBCNowQf71nMp4LEziBgXp54qFV9C+qSTEVdrherRE0PU/zKyX10
        S/P5o42weTHnAO/pBN/8AmL3AymynKVgcPaW46IjjRAuc6kfZWCrYQ0M4+/7Ws5r
        uM55Zae/L+C82OTNNaaK324ogsCkORPeQ23OCrRD8rZJmQ9bpoOGglPminfwEOhB
        UHtyKgmvqCyOV3G/4G93W/xsLV0kxLA=
        -----END CERTIFICATE-----
        EOF
        }
  ui:
    enabled: true
    externalPort: 8200
    targetPort: 8200

tractusxconnector:
  enabled: false
  fullnameOverride: spaicerns1-helm-tractusxconnector
  controlplane:
    image:
      repository: ghcr.io/catenax-ng/tx-tractusx-edc/edc-controlplane-postgresql-hashicorp-vault
      tag: develop
    service:
      type: NodePort
    endpoints:
      data:
        authKey: password
  dataplane:
    image:
      repository: ghcr.io/catenax-ng/tx-tractusx-edc/edc-dataplane-hashicorp-vault
      tag: develop
  vault:
    hashicorp:
      enabled: true
      url: http://spaicerns1-helm-vault:8200
      token: root
    secretNames:
      transferProxyTokenSignerPublicKey: my-edc-daps-crt
      transferProxyTokenSignerPrivateKey: my-edc-daps-key
      transferProxyTokenEncryptionAesKey: data-encryption-aes-keys
      dapsPrivateKey: my-edc-daps-key
      dapsPublicKey: my-edc-daps-crt
  daps:
    url: http://ids-daps:4567
    clientId: 99:83:A7:17:86:FF:98:93:CE:A0:DD:A1:F1:36:FA:F6:0F:75:0A:23:keyid:99:83:A7:17:86:FF:98:93:CE:A0:DD:A1:F1:36:FA:F6:0F:75:0A:23
  backendService:
    httpProxyTokenReceiverUrl: http://backend:8080
  postgresql:
    enabled: true
    jdbcUrl: "jdbc:postgresql://spaicerns1-helm-postgresql:5432/edc"
    password: *psqlPassword
    username: *psqlUsername

# EMQ X (MQTT Broker)
emqxmqttbroker:
  enabled: true
  subDomainDashboard: "emqx-dashboard"
  subDomainApi: "emqx-api"
  fullnameOverride: "spaicerns1-helm-emqx"
  replicaCount: 1

# Node-Red
nodered:
  enabled: true
  subDomain: "node-red"
  fullnameOverride: "spaicerns1-helm-nodered"

# Kong API Gateway
kong:
  enabled: true
  env:
    prefix: /kong_prefix/
    database: "off"
#    database: postgres
#    pg_database: kong
#    pg_user: kong
#    pg_password: password
  admin:
    enabled: true
    type: NodePort
    tls:
      enabled: true
      servicePort: 8444
      containerPort: 8444
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      tls: www-tls
      hostname: ""
      path: /
  proxy:
    enabled: true
    type: LoadBalancer
    http:
      enabled: true
      servicePort: 80
      containerPort: 8000
    tls:
      enabled: true
      servicePort: 443
      containerPort: 8443
      parameters:
        - http2
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      tls: www-tls
      hostname: ""
      path: /
#  postgresql:
#    enabled: true
#    postgresqlUsername: kong
#    postgresqlDatabase: kong
#    postgresqlPassword: password
#    service:
#      port: 5432
#  migrations:
#    preUpgrade: true
#    postUpgrade: true
  dblessConfig:
    configMap: "kong-configmap"
  ingressController:
    enabled: false
    installCRDs: false

# Apache Airflow
airflow:
  enabled: true
  fullnameOverride: "spaicerns1-airflow"
  postgresql:
    enabled: false
  #https://airflow.apache.org/docs/helm-chart/stable/production-guide.html#values-file
  data:
    metadataConnection:
      user: *psqlUsername
      pass: *psqlPassword
      protocol: postgresql
      host: *postgresHost
      port: 5432
      db: *psqlDatabase
  dags:
    gitSync:
      enabled: true
      repo: https://github.com/spaicer/airflow-dags
      branch: main
      rev: HEAD
      subPath: ""
  # Disable migration jobs
  migrateDatabaseJob:
    useHelmHooks: false
  ingress:
    enabled: true
    web:
      host: ""
      ingressClassName: nginx
      tls:
        enabled: true
        secretName: "www-tls"

# Ingress
ingress:
  subDomain: "dispatcher"
  controller:
    ingressClassResource:
      default: true
    watchIngressWithoutClass: true
    extraArgs:
      default-ssl-certificate: "spaicerns1/www-tls"  # K8_NAMESPACE/K8_SECRET_NAME @url: https://kubernetes.github.io/ingress-nginx/user-guide/tls/#consumer-ssl-certificate
    service:
      annotations:
        # Let Gardener manage external DNS records for this Service. See https://gardener.cloud/documentation/guides/administer_shoots/dns_names/ & https://gardener.cloud/documentation/guides/administer_shoots/request_cert/
        cert.gardener.cloud/secretname: "www-tls"
        dns.gardener.cloud/dnsnames: "" # GARDENER_CLUSTER_NAME.GARDENER_PROJECT_NAME.shoot.canary.k8s-hana.ondemand.com
        dns.gardener.cloud/ttl: "600"
        dns.gardener.cloud/class: "garden"
  tcp:
    1883: "spaicerns1/spaicerns1-helm-emqx:1883"
    8883: "spaicerns1/spaicerns1-helm-emqx:8883"

cert-manager:
  installCRDs: true

### Smart Resilience Services

# Smart Resilience Service - Digital Coil
digitalcoilbackend:
  enabled: true
  namespace: ""
  appName: "digital-coil-backend"
  image: "ghcr.io/spaicer/prototype-uc1-narrative1-digital-coil:main"
  imageCredentials: # needed for imagePullSecret docker-registry-github
    enabled: 1
    registry: "ghcr.io"
    username: ""
    accessToken: ""
  containerIngressRouting:
    - name: http8080
      ingressPort: 8080
      containerPort: 8080
      subDomain: "digitalcoilbackend."

digitalcoilui:
  enabled: true
  namespace: ""
  appName: "digital-coil-ui"
  image: "ghcr.io/spaicer/digital-coil:main"
  imageCredentials: # needed for imagePullSecret docker-registry-github
    enabled: 1
    registry: "ghcr.io"
    username: ""
    accessToken: ""
  containerIngressRouting:
    - name: http8080
      ingressPort: 8080
      containerPort: 80
      subDomain: "digitalcoilui."
  containerEnvironmentVariables:
    BACKEND_URL: "http://digital-coil-backend.spaicerns1.svc.cluster.local:8080"

# Supply Chain Analyser
supplychainanalyzer:
  enabled: true
  namespace: ""
  appName: "supply-chain-analyzer"
  image: "ghcr.io/spaicer/supply-chain-analyzer:main"
  imageCredentials: # needed for imagePullSecret docker-registry-github
    enabled: 1
    registry: "ghcr.io"
    username: ""
    accessToken: ""
  containerIngressRouting:
    - name: http8080
      ingressPort: 8080
      containerPort: 8080
      subDomain: "supplychainanalyzer."

supplychainui:
  enabled: true
  namespace: ""
  appName: "supply-chain-ui"
  image: "ghcr.io/spaicer/supply-chain-ui:main"
  imageCredentials: # needed for imagePullSecret docker-registry-github
    enabled: 1
    registry: "ghcr.io"
    username: ""
    accessToken: ""
  containerIngressRouting:
    - name: http8080
      ingressPort: 8080
      containerPort: 80
      subDomain: "supplychainui."
  containerEnvironmentVariables:
    BACKEND_URL: "http://supply-chain-analyzer.spaicerns1.svc.cluster.local:8080"

# Maintenance Level Prediction
ap7maintenancelevelprediction:
  enabled: true
  namespace: ""
  appName: "ap7-maintenance-level-prediction"
  image: "ghcr.io/spaicer/ap7-maintenance-level-prediction:main"
  imageCredentials: # needed for imagePullSecret docker-registry-github
    enabled: 1
    registry: "ghcr.io"
    username: ""
    accessToken: ""
  containerIngressRouting:
    - name: http8080
      ingressPort: 8080
      containerPort: 8080
      subDomain: "ap7maintenancelevelprediction."

maintenancelevelpredictionui:
  enabled: true
  namespace: ""
  appName: "maintenance-level-prediction-ui"
  image: "ghcr.io/spaicer/maintenance-level-prediction-ui:main"
  imageCredentials: # needed for imagePullSecret docker-registry-github
    enabled: 1
    registry: "ghcr.io"
    username: ""
    accessToken: ""
  containerIngressRouting:
    - name: http8080
      ingressPort: 8080
      containerPort: 80
      subDomain: "maintenancelevelpredictionui."
  containerEnvironmentVariables:
    BACKEND_URL: "http://ap7-maintenance-level-prediction.spaicerns1.svc.cluster.local:8080"

### AI Modules

# AI Module - Annotator
annotatormodule:
  enabled: true
  namespace: ""
  appName: "annotator-module"
  image: "ghcr.io/spaicer/annotator-module:main"
  imageCredentials: # needed for imagePullSecret docker-registry-github
    enabled: 1
    registry: "ghcr.io"
    username: ""
    accessToken: ""
  containerIngressRouting:
    - name: http8080
      ingressPort: 8080
      containerPort: 8080
      subDomain: "annotatormodule."
